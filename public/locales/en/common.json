{
  "hub": {
    "welcome": "Romann",
    "portfolio": {
      "title": "Portfolio",
      "description": "Collection of information about my projects and myself"
    },
    "tools": {
      "title": "Tools",
      "description": "Explore the tools I use daily"
    }
  },
  "portfolio": {
    "navigation": {
      "about": "About",
      "career": "Career",
      "skills": "Skills",
      "projects": "Projects"
    },
    "about": {
      "name": "MADEIRA Romann",
      "role": "Developer Analyst",
      "cvLink": "View Resume",
      "description": "23-year-old developer based in France, passionate about coding for 8 years. What I love most? Automating, optimizing, and building projects that excite me."
    },
    "experiences": {
      "work_title": "Experiences",
      "work": [
        {
          "date": "2024 - present",
          "company": "Freelance",
          "role": "Independent",
          "desc": "Client-side development (JS & C#), web automation (Puppeteer, Selenium, Tampermonkey), reverse engineering"
        },
        {
          "date": "2024 - 2025",
          "company": "Samsic",
          "role": "Temporary Worker",
          "desc": "Warehouse operative, farm worker, seasonal laborer"
        },
        {
          "date": "2021 - 2022",
          "company": "Burographic",
          "role": "Apprentice Developer",
          "desc": "Client-side development (Python) with extensive use of the SNMP protocol, technical support, project management, on-site assistance"
        },
        {
          "date": "2021",
          "company": "Burographic",
          "role": "Intern Developer",
          "desc": "VBA development, business process automation, technical documentation"
        }
      ],
      "studies_title": "Education",
      "studies": [
        {
          "date": "2021 - 2022",
          "degree": "Advanced Programming Bachelor's Degree",
          "school": "IUT of Bayonne and the Basque Country",
          "location": "Anglet, 64600 FRANCE"
        },
        {
          "date": "2019 - 2021",
          "degree": "Computer Science Associate Degree",
          "school": "IUT of Bayonne and the Basque Country",
          "location": "Anglet, 64600 FRANCE"
        },
        {
          "date": "2016 - 2019",
          "degree": "Technological Baccalaureate (Mechanical Option)",
          "school": "Louis-de-Foix High School",
          "location": "Bayonne, 64100 FRANCE"
        }
      ]
    },
    "skills": [
      {
        "key": "html",
        "title": "HTML",
        "desc": "Markup language for web pages"
      },
      {
        "key": "css",
        "title": "CSS",
        "desc": "Style and layout of web pages"
      },
      {
        "key": "javascript",
        "title": "JavaScript",
        "desc": "Programming language for the Web"
      },
      {
        "key": "reactjs",
        "title": "React.js",
        "desc": "Library for building web interfaces"
      },
      {
        "key": "nextjs",
        "title": "Next.js",
        "desc": "Framework for server-rendered React apps"
      },
      {
        "key": "nodejs",
        "title": "Node.js",
        "desc": "JavaScript runtime for server-side"
      },
      {
        "key": "python",
        "title": "Python",
        "desc": "High-level, interpreted programming language"
      },
      {
        "key": "csharp",
        "title": "C#",
        "desc": "Object-oriented programming language"
      },
      {
        "key": "tampermonkey",
        "title": "Tampermonkey",
        "desc": "User scripts for web automation"
      },
      {
        "key": "vba",
        "title": "Excel VBA",
        "desc": "Task automation and macros in Excel"
      },
      {
        "key": "powershell",
        "title": "PowerShell",
        "desc": "Windows administration and automation with PowerShell scripts"
      },
      {
        "key": "dnSpy",
        "title": "dnSpy",
        "desc": "Debugger and .NET assembly editor for reverse engineering"
      },
      {
        "key": "mongodb",
        "title": "MongoDB",
        "desc": "NoSQL database for modern applications"
      },
      {
        "key": "postgresql",
        "title": "PostgreSQL",
        "desc": "Relational database management system"
      },
      {
        "key": "git",
        "title": "Git",
        "desc": "Distributed version control system"
      },
      {
        "key": "trello",
        "title": "Trello",
        "desc": "Kanban project management tool"
      }
    ],
    "projects": {
      "mayaya": {
        "title": "Mayaya ‚Äî From a personal idea to an essential tool",
        "description": "AI bot capable of learning to play autonomously, providing statistics, a competition mode, and an in-game overlay",
        "subtitle": "How a simple basic bot became the BombParty community‚Äôs favorite companion",
        "game_title": "About BombParty",
        "game_desc": "BombParty is an online game where speed and vocabulary go hand in hand. Each round, a syllable appears (e.g., \"tra\"); players have a few seconds to type a word containing it (\"travel\", \"contract\", etc.) before the virtual bomb explodes. Easy to pick up, the real challenge lies in the pressure of the clock!",
        "origin": {
          "title": "Origin of Mayaya",
          "description": "It all started with a simple observation: on BombParty, you couldn‚Äôt play solo or practice. No single-player mode, just public matches with random opponents. Frustrated by these limits (and admittedly a bit bored), I launched a little bot for fun",
          "steps": [
            {
              "icon": "üòÇ",
              "title": "A prank",
              "desc": "Originally it was just a joke: a bot that replied ‚Äúfeur‚Äù whenever someone typed ‚Äúquoi‚Äù in chat"
            },
            {
              "icon": "üíæ",
              "title": "The .exe tool",
              "desc": "The bot gained traction, so I added fun features. When a friend wanted to try it, I packaged everything into a Python app with a simple GUI"
            },
            {
              "icon": "ü§ñ",
              "title": "Then the 24/7 bot",
              "desc": "Running the bot locally was nice‚Ä¶ but inconvenient. So I migrated to a Node.js bot hosted online around the clock, with over 30 commands and advanced training modes"
            },
            {
              "icon": "üñ•Ô∏è",
              "title": "Finally, the overlay",
              "desc": "The last hurdle was switching to chat to see scores and stats. So I added a visual overlay: a clean, responsive, modular interface"
            }
          ],
          "conclusion": "This journey‚Äîfrom simple prank to full overlay‚Äîinspired the BombParty devs to adopt many of these ideas natively!"
        },
        "modules": {
          "python": {
            "label": "Python Bot",
            "objective": "Provide a simple solution allowing any player to add a bot to a channel, without complex setup or technical dependencies.",
            "tech": [
              "Python 3",
              "customTkinter (UI)",
              "pyInstaller (.exe)",
              "WebSocket (reverse engineering)",
              "OpenAI API"
            ],
            "features": [
              "Intuitive visual interface for managing bots and joining channels",
              "Reads syllables via WebSocket and responds automatically using a local dictionary",
              "Various options: autojoin, easter eggs, conversational AI replies"
            ],
            "limits": [
              "No data persistence",
              "Manual reconnection after crashes",
              "Lack of error handling",
              "Unsigned executable, blocked by some antivirus software",
              "Heavy maintenance: manual recompilation after each change"
            ]
          },
          "node": {
            "label": "Mayaya Bot",
            "objective": "Develop a centralized, continuously hosted bot capable of interacting with players, learning automatically, retaining statistics, helping new players, and offering advanced features.",
            "tech": [
              "Node.js",
              "PostgreSQL",
              "JSON",
              "WebSocket (reverse engineering)",
              "OpenAI API"
            ],
            "features": [
              "Main channel accessible at all times",
              "Over 30 commands available: statistics, help, moderation‚Ä¶",
              "Competitive training mode tracking WPM, reaction time, and accuracy",
              "Automatic learning of new words by observing ongoing games",
              "Interactive real-time dialogue with the bot",
              "Contextual reactions to recognized players (via GPT embed)",
              "Automatic reconnection if disconnected",
              "Secondary instances without impacting the main room"
            ],
            "limits": [
              "No visual dashboard: everything managed via in-game chat",
              "PostgreSQL database access limited to text interface"
            ]
          },
          "overlay": {
            "label": "Overlay",
            "objective": "Display performance data in real time, accessible to all players, without relying on a bot. Designed as a complement to the game‚Äôs UX.",
            "tech": [
              "JavaScript",
              "Tampermonkey",
              "DOM API",
              "jQuery",
              "CSS"
            ],
            "features": [
              "Customizable stats table (WPM, reaction time, error rate‚Ä¶)",
              "Filterable training module (random, occurrences, regex‚Ä¶) with dynamic highlighting",
              "Integrated practice and personal bots directly in-game",
              "Persistence of user preferences (GM_setValue)",
              "Keyboard-first, modular, accessible interface",
              "Enhanced player profile",
              "100% client-side, with no server requests"
            ],
            "limits": [
              "Abandoned before final release: BombParty integrated main ideas natively",
              "Highly sensitive to DOM changes",
              "No mobile support"
            ]
          }
        },
        "funFact": {
          "title": "Fun Fact: The war of attrition against Maca",
          "intro": "When I launched Mayaya, Maca‚Äîthe BombParty staff‚Äôs enforcer‚Äîbecame a real blockade:",
          "items": [
            {
              "icon": "üîí",
              "text": "Only one bot was tolerated; all others were wiped out"
            },
            {
              "icon": "üö´",
              "text": "Every ‚Äúfun‚Äù feature (profile GIFs, birthday alerts‚Ä¶) was removed in a hotfix"
            },
            {
              "icon": "üõ°Ô∏è",
              "text": "A stealth reCAPTCHA and WebSocket encryption to stifle any initiative"
            }
          ],
          "war_intro": "Rather than giving up, we launched a real war of attrition:",
          "warSteps": [
            {
              "icon": "ü§ñ",
              "text": "Bypassing the reCAPTCHA by simulating HTTP requests and user interactions"
            },
            {
              "icon": "üîç",
              "text": "Intensive reverse-engineering of WebSocket traffic at every patch"
            },
            {
              "icon": "üõ†Ô∏è",
              "text": "Auto-adaptive scripts capable of keeping pace with real-time updates"
            }
          ],
          "conclusion": "After a year-long tug-of-war against Maca (already widely despised by the community), he finally gave up. Before disappearing, he lifted all anti-bot protections (reCAPTCHA, obfuscation). A wave of innovative bots and new overlays swept in, and BombParty has never been more alive."
        },
        "remark": "Note",
        "remark_label": " After two years of 24/7 operation, I stopped continuously hosting the bot due to lack of motivation to maintain the service. Other newer bots have emerged and taken up the torch, but the code remains available for local use."
      },
      "arie": {
        "title": "Arie ‚Äî Personal Multifunction Discord Bot",
        "description": "Discord bot offering a wide range of features: engaging mini-games, music streaming, customizable alerts, data storage, and much more",
        "subtitle": "One single bot to replace an entire army of bots on our Discord server",
        "discord_title": "What is Discord?",
        "discord_desc": "Discord is a free chat platform (voice, video, and text) extremely popular with gaming communities, students, and project teams. Each space is called a server, composed of text and voice channels. Discord bots are automated accounts capable of responding to commands and enriching the user experience (games, moderation, music, etc.).",
        "origin": {
          "title": "Origin of Arie",
          "description": "Within our Discord server, the proliferation of specialized bots (music, mini-games, GPT, giveaways, etc.) became unmanageable: tedious maintenance, scattered permissions, and frequent outages (e.g., music bots relying on YouTube getting blocked). So we created Arie, guided by three principles:",
          "steps": [
            {
              "icon": "üóÇÔ∏è",
              "title": "Centralization",
              "desc": "Gather all truly useful features into a single bot."
            },
            {
              "icon": "üé®",
              "title": "Customization",
              "desc": "Offer a tailor-made experience (GPT personalities, inside-joke commands, etc.)."
            },
            {
              "icon": "üõ°Ô∏è",
              "title": "Reliability",
              "desc": "Ensure 24/7 availability and a polished UX (slash commands + buttons)."
            }
          ],
          "conclusion": ""
        },
        "modules": {
          "node": {
            "label": "Discord Bot",
            "objective": "Create and maintain a single, scalable, open-source bot that covers 100% of our daily Discord needs (games, music, AI, utilities) while remaining lightweight to deploy and easy to evolve.",
            "tech": [
              "Node.js",
              "Express",
              "PostgreSQL",
              "YTDL-Core",
              "OpenAI API",
              "DALL¬∑E",
              "Heroku"
            ],
            "features": [
              "Built-in mini-games: multiplayer Connect 4 via embeds/buttons + Minimax AI",
              "Conversational AI: GPT-3.5/4 with interchangeable personalities and DALL¬∑E image generation",
              "Music player: full controls, synchronized lyrics, persistent playlists, multi-platform search",
              "Utilities: Caesar cipher, free Epic/Steam game announcements, other in-house tools",
              "DevOps: automated Heroku deployment, 24/7 uptime ensured by UptimeRobot"
            ],
            "limits": [
              "Audio depends on YTDL-Core (risk of future blocking)",
              "GPT costs can skyrocket with heavy usage",
              "Mobile interface could optimize button ergonomics on small screens"
            ]
          }
        },
        "enhancement": "Enhancements",
        "enhancements": [
          "Add other interactive mini-games such as hangman, quizzes",
          "Integrate new commands connected to external APIs (anime, weather, news, etc.)",
          "Develop a web interface to more easily manage playlists and bot preferences"
        ]
      },
      "snapscore": {
        "title": "SnapScore+ ‚Äî Local multi-account orchestration",
        "description": "Local multi-account orchestrator based on Node.js and Puppeteer. It drives multiple Chrome profiles to send and open snaps in loops using dedicated macros.",
        "subtitle": "Automate the web interface to raise a Snap Score from a single machine",
        "snapchat": {
          "title": "About Snapchat",
          "description": "Snapchat is a social network centered on sending ephemeral photos and videos. Snap Score increases by repeating two simple actions:",
          "rules": [
            "Open a received snap: +1",
            "Someone opens your snap: +1"
          ],
          "context": "With manual use, most accounts stay in the hundreds or a few thousand points. Reaching the millions is rare."
        },
        "origin": {
          "title": "Project origin",
          "intro": "I wanted to measure how far a Snap Score could go by automating the interface like a human would, on a single machine and without servers.",
          "steps": [
            {
              "title": "Mobile prototype",
              "desc": "Two phones with simple macros establish a baseline of ~30 points/min. Enough to validate the idea and show that multiplying devices doesn‚Äôt scale."
            },
            {
              "title": "Web userscript",
              "desc": "A Tampermonkey script that clicks through the web UI proves feasibility and doubles throughput to ~60 points/min, but the computer must stay focused on visible windows."
            },
            {
              "title": "Node.js/Puppeteer orchestrator",
              "desc": "Multi-window control (dual main session plus assistants) with locks, short pauses and restart rules: the desktop remains usable while climbing to ~460 points/min across nine windows."
            }
          ],
          "focus": "The orchestrator changes everything: it coordinates visibility, prevents collisions and recovers automatically."
        },
        "architecture": {
          "title": "Technical architecture",
          "objective": "Maximize the main account‚Äôs score by coordinating helper accounts locally, keeping steady throughput without remote infrastructure.",
          "componentsTitle": "Key components",
          "components": [
            "Local orchestrator (Node.js + Puppeteer) that opens, drives and supervises each window.",
            "Main account split across two parallel windows to maximize useful sends.",
            "Assistant accounts dedicated to opening snaps and feeding the backlog.",
            "A scheduler that assigns roles, paces sends/reads and monitors session health."
          ],
          "resourceManagementTitle": "Resource management rules",
          "resourceManagement": [
            "Camera lock: only one send at a time on the main account.",
            "Controlled backlog: automatic pause beyond 25 unread snaps to drain the queue.",
            "Threshold restarts: a window is restarted when send/read latency exceeds ~1 s, which brings reads back to ~500 ms and sends to ~700 ms after reset.",
            "Visibility guardrails: every action waits for the targeted element to exist and be visible, faster on average and without arbitrary timers."
          ],
          "observabilityTitle": "Observability and controls",
          "observability": [
            "Per-window counters: successful sends/reads, queue size, and p50/p95 latencies.",
            "startCheckingIssues loop: aggregates averages, computes points/min and triggers targeted restarts (main, assistants or global).",
            "Structured logs (startLog) with session duration, send/read averages, backlog and blocked/healthy states.",
            "Automatic slowdowns or restarts as soon as p95 drifts."
          ],
          "stackTitle": "Stack and tools",
          "stack": [
            "JavaScript",
            "Node.js",
            "Puppeteer",
            "Initial prototype as a Tampermonkey userscript"
          ]
        },
        "modules": {
          "mobile": {
            "label": "Mobile prototype",
            "objective": "Validate the idea: sync one phone that sends and another that opens to measure the real gain.",
            "tech": [
              "MacroDroid"
            ],
            "advantages": [
              "Quick setup with two phones.",
              "Close to normal app usage, so very low risk."
            ],
            "limits": [
              "Multiple phones plugged in continuously.",
              "Camera and apps unavailable during the session.",
              "Finicky macro tuning."
            ],
            "perf": "~25 points/min"
          },
          "web": {
            "label": "Web userscript",
            "objective": "Speed up cleanly: automate through the browser to chain sends/reads while keeping live visibility.",
            "tech": [
              "JavaScript",
              "Tampermonkey"
            ],
            "advantages": [
              "Clear settings, fast tests, easy iterations.",
              "Browser tools help understand and fix quickly."
            ],
            "limits": [
              "PC monopolized without a second screen.",
              "Any Snapchat UI change breaks the automation.",
              "Platform defenses: throttling, dropped sessions.",
              "Camera and mic monopolized by the browser, possible conflicts.",
              "On long sessions: slowdowns and growing memory."
            ],
            "perf": "~60 points/min"
          },
          "puppeteer": {
            "label": "Puppeteer orchestrator",
            "objective": "Maximize score: run multiple accounts in parallel on one machine with simple rules, priorities and continuous monitoring.",
            "tech": [
              "Node.js",
              "JavaScript",
              "Puppeteer"
            ],
            "advantages": [
              "Each account isolated with automatic reconnection.",
              "Windows visible or hidden, scheduled launches and regular checks.",
              "Fine-grained resource control: who gets the camera, when to restart, how to avoid bottlenecks.",
              "Centralized monitoring with clear indicators updated every second.",
              "Can be deployed on other machines if needed."
            ],
            "limits": [
              "Performance depends on hardware: CPU, RAM, disk, video encoding.",
              "Memory grows with the number of instances."
            ],
            "perf": "~430 points/min on my setup with 2 main accounts and 7 assistants"
          }
        },
        "observation": {
          "title": "Findings before the final version",
          "items": [
            "A Snapchat account can be connected in two places at the same time.",
            "Leaving a session open too long ends up slowing everyone down.",
            "The camera can‚Äôt be used by two instances simultaneously."
          ],
          "conclusion": "These findings guided the rules: limit session duration, queue camera access and restart as soon as metrics drift."
        },
        "operating_title": "Operating logic",
        "management": {
          "title": "Instance management",
          "items": [
            "An AccountManager supervises the accounts: connection, health checks and role assignment.",
            "Each account has its own browser profile with saved cookies to reconnect automatically.",
            "Main accounts send snaps, assistants open them."
          ]
        },
        "monitoring": {
          "title": "Continuous monitoring",
          "items": [
            "Each window directly watches its conversation to act at the right moment, without arbitrary timers.",
            "Aggregated counters track sends, reads, averages and backlog size in real time.",
            "These metrics refresh in the console every 500 ms to keep tight control of the system."
          ]
        },
        "rules": {
          "title": "Resource rules",
          "items": [
            "Camera lock: only one account has camera access at a time.",
            "Controlled queue: pause as soon as more than 25 snaps remain unread.",
            "Targeted restarts when send or open averages drift.",
            "Auto-reconnect: if a window closes or numbers go off the rails, cut and relaunch cleanly."
          ]
        },
        "code": {
          "title": "Codebase",
          "structureTitle": "Directory structure",
          "structure": "src/\n  DOM/\n    observers.js\n    selectors.js\n  macros/\n    discussion.js\n    openSnaps.js\n    sendSnaps.js\n  scripts/\n    focus.js\n    injection.js\n  Snapchat/\n    account.js\n    manager.js\n  utils/\n    cameraMutex.js\n    index.js",
          "modulesTitle": "Key modules",
          "modules": [
            {
              "title": "src/index.js",
              "desc": "Configures runtime constants, instantiates AccountManager and starts the supervision loops."
            },
            {
              "title": "src/Snapchat/manager.js",
              "desc": "Coordinates accounts, aggregates metrics and drives targeted restarts."
            },
            {
              "title": "src/Snapchat/account.js",
              "desc": "Defines the Puppeteer session: profile, login, script injection and individual state."
            },
            {
              "title": "src/macros/",
              "desc": "Client-side scripts to send or open snaps via the web interface."
            },
            {
              "title": "src/DOM/",
              "desc": "Selectors and observers to track conversations, messages and triggers."
            },
            {
              "title": "src/scripts/focus.js",
              "desc": "Disables a few focus/screenshot protections to stabilize Snapchat Web."
            },
            {
              "title": "src/utils/cameraMutex.js",
              "desc": "Camera control tower so everyone takes turns."
            }
          ],
          "workflowTitle": "Execution loops",
          "workflow": [
            "Reading snaps: while unread remain, measure open time and enable congestion mode beyond 25 snaps of backlog.",
            "Sending snaps: batch sends of 50 as soon as the pipeline is free.",
            "Health loop: monitors latencies, backlog and the orchestrator‚Äôs decisions (pause, resume, restart)."
          ]
        },
        "performance": {
          "title": "Measured behavior",
          "items": [
            "Best balance is with 9 windows (2 main accounts, 7 assistants).",
            "Sustained throughput: about 460 points/min with this configuration.",
            "Experience: ~10,000,000 points on the main account in 14 days and ~1,000,000 per assistant account."
          ]
        },
        "remark": {
          "title": "Note",
          "description": "Experimental personal project. Automating the interface may go against the terms of service. The code is limited to local automation of a public interface."
        },
        "learnings": {
          "title": "What this demonstrates",
          "items": [
            "Stability (locks, thresholds, restarts) matters more than raw speed.",
            "A well-tuned local orchestrator is enough to manage multiple accounts without remote infrastructure.",
            "Simple rules like the camera lock, backlog limit and latency guard make the system predictable and easy to fix."
          ]
        }
      }
    },
    "sections": {
      "objective": "Project Objective",
      "features": "Main Features",
      "advantages": "Advantages",
      "limits": "Limitations",
      "viewCode": "View Code",
      "architecture": "üîß Technical architecture of the project"
    }
  },
  "sidebar": {
    "home": "Home",
    "translate": "Translate [FR]",
    "chatbot": "Chatbot"
  },
  "assistant": {
    "welcome": "Welcome to my portfolio!",
    "input": "Write a message..."
  }
}
