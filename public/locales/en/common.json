{
  "hub": {
    "welcome": "Romann",
    "portfolio": {
      "title": "Portfolio",
      "description": "Collection of information about my projects and myself"
    },
    "tools": {
      "title": "Tools",
      "description": "Explore the tools I use daily"
    }
  },
  "portfolio": {
    "navigation": {
      "about": "About",
      "career": "Career",
      "skills": "Skills",
      "projects": "Projects"
    },
    "about": {
      "name": "MADEIRA Romann",
      "role": "Developer Analyst",
      "cvLink": "View Resume",
      "description": "23-year-old developer based in France, passionate about coding for 8 years. What I love most? Automating, optimizing, and building projects that excite me."
    },
    "experiences": {
      "work_title": "Experiences",
      "work": [
        {
          "date": "2024 - present",
          "company": "Freelance",
          "role": "Independent",
          "desc": "Client-side development (JS & C#), web automation (Puppeteer, Selenium, Tampermonkey), reverse engineering"
        },
        {
          "date": "2024 - 2025",
          "company": "Samsic",
          "role": "Temporary Worker",
          "desc": "Warehouse operative, farm worker, seasonal laborer"
        },
        {
          "date": "2021 - 2022",
          "company": "Burographic",
          "role": "Apprentice Developer",
          "desc": "Client-side development (Python) with extensive use of the SNMP protocol, technical support, project management, on-site assistance"
        },
        {
          "date": "2021",
          "company": "Burographic",
          "role": "Intern Developer",
          "desc": "VBA development, business process automation, technical documentation"
        }
      ],
      "studies_title": "Education",
      "studies": [
        {
          "date": "2021 - 2022",
          "degree": "Advanced Programming Bachelor's Degree",
          "school": "IUT of Bayonne and the Basque Country",
          "location": "Anglet, 64600 FRANCE"
        },
        {
          "date": "2019 - 2021",
          "degree": "Computer Science Associate Degree",
          "school": "IUT of Bayonne and the Basque Country",
          "location": "Anglet, 64600 FRANCE"
        },
        {
          "date": "2016 - 2019",
          "degree": "Technological Baccalaureate (Mechanical Option)",
          "school": "Louis-de-Foix High School",
          "location": "Bayonne, 64100 FRANCE"
        }
      ]
    },
    "skills": [
      { "key": "html",        "title": "HTML",         "desc": "Markup language for web pages" },
      { "key": "css",         "title": "CSS",          "desc": "Style and layout of web pages" },
      { "key": "javascript",  "title": "JavaScript",   "desc": "Programming language for the Web" },
      { "key": "reactjs",     "title": "React.js",     "desc": "Library for building web interfaces" },
      { "key": "nextjs",      "title": "Next.js",      "desc": "Framework for server-rendered React apps" },
      { "key": "nodejs",      "title": "Node.js",      "desc": "JavaScript runtime for server-side" },
      { "key": "python",      "title": "Python",       "desc": "High-level, interpreted programming language" },
      { "key": "csharp",      "title": "C#",            "desc": "Object-oriented programming language" },
      { "key": "tampermonkey","title": "Tampermonkey", "desc": "User scripts for web automation" },
      { "key": "vba",         "title": "Excel VBA",    "desc": "Task automation and macros in Excel" },
      { "key": "powershell",  "title": "PowerShell",   "desc": "Windows administration and automation with PowerShell scripts" },
      { "key": "dnSpy",       "title": "dnSpy",        "desc": "Debugger and .NET assembly editor for reverse engineering" },
      { "key": "mongodb",     "title": "MongoDB",      "desc": "NoSQL database for modern applications" },
      { "key": "postgresql",  "title": "PostgreSQL",   "desc": "Relational database management system" },
      { "key": "git",         "title": "Git",          "desc": "Distributed version control system" },
      { "key": "trello",      "title": "Trello",       "desc": "Kanban project management tool" }
    ],
    "projects": {
      "mayaya": {
        "title": "Mayaya ‚Äî From a personal idea to an essential tool",
        "description": "AI bot capable of learning to play autonomously, providing statistics, a competition mode, and an in-game overlay",
        "subtitle": "How a simple basic bot became the BombParty community‚Äôs favorite companion",
        "game_title": "About BombParty",
        "game_desc": "BombParty is an online game where speed and vocabulary go hand in hand. Each round, a syllable appears (e.g., \"tra\"); players have a few seconds to type a word containing it (\"travel\", \"contract\", etc.) before the virtual bomb explodes. Easy to pick up, the real challenge lies in the pressure of the clock!",
        "origin": {
          "title": "Origin of Mayaya",
          "description": "It all started with a simple observation: on BombParty, you couldn‚Äôt play solo or practice. No single-player mode, just public matches with random opponents. Frustrated by these limits (and admittedly a bit bored), I launched a little bot for fun",
          "steps": [
            { "icon": "üòÇ", "title": "A prank",     "desc": "Originally it was just a joke: a bot that replied ‚Äúfeur‚Äù whenever someone typed ‚Äúquoi‚Äù in chat" },
            { "icon": "üíæ", "title": "The .exe tool", "desc": "The bot gained traction, so I added fun features. When a friend wanted to try it, I packaged everything into a Python app with a simple GUI" },
            { "icon": "ü§ñ", "title": "Then the 24/7 bot", "desc": "Running the bot locally was nice‚Ä¶ but inconvenient. So I migrated to a Node.js bot hosted online around the clock, with over 30 commands and advanced training modes" },
            { "icon": "üñ•Ô∏è", "title": "Finally, the overlay", "desc": "The last hurdle was switching to chat to see scores and stats. So I added a visual overlay: a clean, responsive, modular interface" }
          ],
          "conclusion": "This journey‚Äîfrom simple prank to full overlay‚Äîinspired the BombParty devs to adopt many of these ideas natively!"
        },
        "modules": {
          "python": {
            "label": "Python Bot",
            "objective": "Provide a simple solution allowing any player to add a bot to a channel, without complex setup or technical dependencies.",
            "tech": [
              "Python 3",
              "customTkinter (UI)",
              "pyInstaller (.exe)",
              "WebSocket (reverse engineering)",
              "OpenAI API"
            ],
            "features": [
              "Intuitive visual interface for managing bots and joining channels",
              "Reads syllables via WebSocket and responds automatically using a local dictionary",
              "Various options: autojoin, easter eggs, conversational AI replies"
            ],
            "limits": [
              "No data persistence",
              "Manual reconnection after crashes",
              "Lack of error handling",
              "Unsigned executable, blocked by some antivirus software",
              "Heavy maintenance: manual recompilation after each change"
            ]
          },
          "node": {
            "label": "Mayaya Bot",
            "objective": "Develop a centralized, continuously hosted bot capable of interacting with players, learning automatically, retaining statistics, helping new players, and offering advanced features.",
            "tech": [
              "Node.js",
              "PostgreSQL",
              "JSON",
              "WebSocket (reverse engineering)",
              "OpenAI API"
            ],
            "features": [
              "Main channel accessible at all times",
              "Over 30 commands available: statistics, help, moderation‚Ä¶",
              "Competitive training mode tracking WPM, reaction time, and accuracy",
              "Automatic learning of new words by observing ongoing games",
              "Interactive real-time dialogue with the bot",
              "Contextual reactions to recognized players (via GPT embed)",
              "Automatic reconnection if disconnected",
              "Secondary instances without impacting the main room"
            ],
            "limits": [
              "No visual dashboard: everything managed via in-game chat",
              "PostgreSQL database access limited to text interface"
            ]
          },
          "overlay": {
            "label": "Overlay",
            "objective": "Display performance data in real time, accessible to all players, without relying on a bot. Designed as a complement to the game‚Äôs UX.",
            "tech": [
              "JavaScript",
              "Tampermonkey",
              "DOM API",
              "jQuery",
              "CSS"
            ],
            "features": [
              "Customizable stats table (WPM, reaction time, error rate‚Ä¶)",
              "Filterable training module (random, occurrences, regex‚Ä¶) with dynamic highlighting",
              "Integrated practice and personal bots directly in-game",
              "Persistence of user preferences (GM_setValue)",
              "Keyboard-first, modular, accessible interface",
              "Enhanced player profile",
              "100% client-side, with no server requests"
            ],
            "limits": [
              "Abandoned before final release: BombParty integrated main ideas natively",
              "Highly sensitive to DOM changes",
              "No mobile support"
            ]
          }
        },
        "funFact": {
          "title": "Fun Fact: The war of attrition against Maca",
          "intro": "When I launched Mayaya, Maca‚Äîthe BombParty staff‚Äôs enforcer‚Äîbecame a real blockade:",
          "items": [
            { "icon": "üîí", "text": "Only one bot was tolerated; all others were wiped out" },
            { "icon": "üö´", "text": "Every ‚Äúfun‚Äù feature (profile GIFs, birthday alerts‚Ä¶) was removed in a hotfix" },
            { "icon": "üõ°Ô∏è", "text": "A stealth reCAPTCHA and WebSocket encryption to stifle any initiative" }
          ],
          "war_intro": "Rather than giving up, we launched a real war of attrition:",
          "warSteps": [
            { "icon": "ü§ñ", "text": "Bypassing the reCAPTCHA by simulating HTTP requests and user interactions" },
            { "icon": "üîç", "text": "Intensive reverse-engineering of WebSocket traffic at every patch" },
            { "icon": "üõ†Ô∏è", "text": "Auto-adaptive scripts capable of keeping pace with real-time updates" }
          ],
          "conclusion": "After a year-long tug-of-war against Maca (already widely despised by the community), he finally gave up. Before disappearing, he lifted all anti-bot protections (reCAPTCHA, obfuscation). A wave of innovative bots and new overlays swept in, and BombParty has never been more alive."
        },
        "remark": "Note",
        "remark_label": " After two years of 24/7 operation, I stopped continuously hosting the bot due to lack of motivation to maintain the service. Other newer bots have emerged and taken up the torch, but the code remains available for local use."
      },
      "arie": {
        "title": "Arie ‚Äî Personal Multifunction Discord Bot",
        "description": "Discord bot offering a wide range of features: engaging mini-games, music streaming, customizable alerts, data storage, and much more",
        "subtitle": "One single bot to replace an entire army of bots on our Discord server",
        "discord_title": "What is Discord?",
        "discord_desc": "Discord is a free chat platform (voice, video, and text) extremely popular with gaming communities, students, and project teams. Each space is called a server, composed of text and voice channels. Discord bots are automated accounts capable of responding to commands and enriching the user experience (games, moderation, music, etc.).",
        "origin": {
          "title": "Origin of Arie",
          "description": "Within our Discord server, the proliferation of specialized bots (music, mini-games, GPT, giveaways, etc.) became unmanageable: tedious maintenance, scattered permissions, and frequent outages (e.g., music bots relying on YouTube getting blocked). So we created Arie, guided by three principles:",
          "steps": [
            { "icon": "üóÇÔ∏è", "title": "Centralization",   "desc": "Gather all truly useful features into a single bot." },
            { "icon": "üé®", "title": "Customization",    "desc": "Offer a tailor-made experience (GPT personalities, inside-joke commands, etc.)." },
            { "icon": "üõ°Ô∏è", "title": "Reliability",      "desc": "Ensure 24/7 availability and a polished UX (slash commands + buttons)." }
          ],
          "conclusion": ""
        },
        "modules": {
          "node": {
            "label": "Discord Bot",
            "objective": "Create and maintain a single, scalable, open-source bot that covers 100% of our daily Discord needs (games, music, AI, utilities) while remaining lightweight to deploy and easy to evolve.",
            "tech": [
              "Node.js",
              "Express",
              "PostgreSQL",
              "YTDL-Core",
              "OpenAI API",
              "DALL¬∑E",
              "Heroku"
            ],
            "features": [
              "Built-in mini-games: multiplayer Connect 4 via embeds/buttons + Minimax AI",
              "Conversational AI: GPT-3.5/4 with interchangeable personalities and DALL¬∑E image generation",
              "Music player: full controls, synchronized lyrics, persistent playlists, multi-platform search",
              "Utilities: Caesar cipher, free Epic/Steam game announcements, other in-house tools",
              "DevOps: automated Heroku deployment, 24/7 uptime ensured by UptimeRobot"
            ],
            "limits": [
              "Audio depends on YTDL-Core (risk of future blocking)",
              "GPT costs can skyrocket with heavy usage",
              "Mobile interface could optimize button ergonomics on small screens"
            ]
          }
        },
        "enhancement": "Enhancements",
        "enhancements": [
          "Add other interactive mini-games such as hangman, quizzes",
          "Integrate new commands connected to external APIs (anime, weather, news, etc.)",
          "Develop a web interface to more easily manage playlists and bot preferences"
        ]
      },
      "snapscore": {
        "title": "SnapScore Engine ‚Äî From idea to local orchestration",
        "description": "Local multi-account Snapchat orchestrator using Puppeteer, designed to increase a specific account‚Äôs Snap Score.",
        "subtitle": "How I turned a curiosity about Snap Scores into a 10M-point orchestration experiment",
        "snapchat": {
          "title": "About Snapchat",
          "description": "Snapchat is a social network built around ephemeral photos and videos. Its Snap Score rewards a handful of simple actions:",
          "rules": [
            "Open a received Snap: +1",
            "Someone opens one of your Snaps: +1"
          ],
          "context": "Most long-standing accounts remain in the hundreds or a few thousands of points. Hitting the millions is rare."
        },
        "origin": {
          "title": "Project origin",
          "intro": "I wanted to see how far a Snap Score could go by automating the interface like a human would, on a single machine and without servers.",
          "steps": [
            { "icon": "üì±", "title": "Mobile prototype", "desc": "Two phones with small macros established a ~30 pts/min baseline. It set expectations and showed that scaling with more devices would not be sustainable." },
            { "icon": "üåê", "title": "Web userscript", "desc": "A Tampermonkey script clicking through the web interface proved feasibility and doubled throughput to ~60 pts/min, but the computer had to stay focused on the visible windows." },
            { "icon": "ü§ñ", "title": "Node.js/Puppeteer orchestrator", "desc": "Multi-window driving (dual main instance plus assistants) with locks, short pauses, and restart rules kept the desktop usable while climbing to ‚âà460 pts/min across nine windows." }
          ],
          "focus": "The orchestrator is the differentiator: it coordinates visibility, avoids collisions, and recovers automatically."
        },
        "architecture": {
          "title": "Technical architecture",
          "objective": "Maximize the main account's score by coordinating assistant accounts locally, keeping throughput stable without any remote infrastructure.",
          "components": [
            "Local orchestrator (Node.js + Puppeteer) that opens, drives, and supervises every browser window.",
            "Main account running in two parallel windows to maximize useful sends.",
            "Assistant accounts dedicated to reading Snaps and feeding the backlog.",
            "Scheduler assigning roles, pacing sends/reads, and watching session health."
          ],
          "resourceManagement": [
            "Camera lock ensuring only one send happens at a time on the main account.",
            "Controlled backlog: if any window queues more than 25 unread Snaps, the system pauses, catches up, then resumes.",
            "Threshold-based restarts: windows restart when send/read latency exceeds ~1 s, dropping back to ~500 ms reads and ~700 ms sends after reset.",
            "Visibility guards: every action waits for the target element to exist and be visible before interacting‚Äîfaster on average and timer-free."
          ],
          "observability": [
            "Per-window counters for successful sends/reads, queue size, and p50/p95 latencies.",
            "startCheckingIssues loop aggregating averages, computing points per minute, and triggering targeted restarts (main, assistants, or global).",
            "Structured console logs (startLog) with session duration, send/read averages, backlog levels, and blocked/healthy account lists.",
            "Automatic slowdowns or restarts when the p95 drifts upward."
          ],
          "stack": [
            "JavaScript",
            "Node.js",
            "Puppeteer",
            "Initial prototype written as a Tampermonkey userscript"
          ]
        },
        "code": {
          "title": "Code base",
          "structure": "src/\n|- DOM/\n|- Snapchat/\n|- macros/\n|- scripts/\n|- utils/\n\\- index.js",
          "modules": [
            { "title": "src/index.js", "desc": "Launches the orchestrator and configures window lifecycles." },
            { "title": "src/Snapchat/manager.js", "desc": "Coordinates multi-account execution and balances roles." },
            { "title": "src/Snapchat/account.js", "desc": "Encapsulates the behaviour and metrics of a single account session." },
            { "title": "src/macros/", "desc": "Reusable automation primitives for opening, sending, and acknowledging Snaps." },
            { "title": "src/DOM/", "desc": "Helpers to locate and interact with Snapchat Web UI elements." },
            { "title": "src/scripts/", "desc": "Scripts injected directly into Snapchat Web to observe states and queues." },
            { "title": "src/utils/cameraMutex.js", "desc": "Camera mutex controlling access to the shared video input." }
          ],
          "workflow": [
            "Snap reading: loop while unread items remain, measure open time, and enable congestion mode when any queue exceeds 25 Snaps.",
            "Snap sending: dispatches batches of 50 when the send pipeline is clear.",
            "Health loop monitors latencies, backlog, and orchestrator decisions (pause, resume, restart)."
          ]
        },
        "performance": {
          "title": "Measured performance",
          "items": [
            "Sweet spot: nine windows in total (two for the main account, seven assistants).",
            "Sustained throughput: ‚âà460 points per minute with that configuration.",
            "Experimental run: ~10,000,000 points on the main account in about 14 days; ~1,000,000 per assistant account."
          ]
        },
        "remark": {
          "title": "Note",
          "description": "This is an experimental, personal project. Automating the interface can violate the platform's Terms of Service. I never touched the network layer or private APIs‚Äîonly scripted UI interactions, locally and reversibly."
        },
        "learnings": {
          "title": "What it demonstrates",
          "items": [
            "Stability (locks, thresholds, restarts) matters more than raw speed.",
            "A well-tuned local orchestrator can reach large volumes without servers.",
            "Simple rules keep the system predictable and easy to fix quickly."
          ]
        }
      }
    },
    "sections": {
      "objective": "Project Objective",
      "features": "Main Features",
      "limits": "Limitations",
      "viewCode": "View Code",
      "architecture": "üîß Technical architecture of the project"
    }
  },
  "sidebar": {
    "home": "Home",
    "translate": "Translate [FR]",
    "chatbot": "Chatbot"
  },
  "assistant":{
    "welcome":"Welcome to my portfolio!",
	  "input":"Write a message..."
  }
}
